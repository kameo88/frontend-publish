/* tslint:disable */
/* eslint-disable */
/**
 * KMBS backend API Documentation
 * KMBS backend API Documentation
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * API 삭제 결과 정보
 * @export
 * @interface DeleteApiResponse
 */
export interface DeleteApiResponse {
    /**
     * 삭제된 API 아이디
     * @type {number}
     * @memberof DeleteApiResponse
     */
    apiId?: number;
}
/**
 * 에러 결과 정보
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error 코드
     * @type {string}
     * @memberof ErrorResponse
     */
    errorCode?: string;
    /**
     * Error 메시지
     * @type {string}
     * @memberof ErrorResponse
     */
    errorMessage?: string;
}
/**
 * API 등록 요청 정보
 * @export
 * @interface InsertApiRequest
 */
export interface InsertApiRequest {
    /**
     * 사이트 코드, 코드그룹(site_ccd)
     * @type {string}
     * @memberof InsertApiRequest
     */
    siteCode?: InsertApiRequestSiteCodeEnum;
    /**
     * API 명
     * @type {string}
     * @memberof InsertApiRequest
     */
    apiName: string;
    /**
     * API URL
     * @type {string}
     * @memberof InsertApiRequest
     */
    apiUri: string;
    /**
     * API 메소드 코드(공통 코드 참조 : API_MTH_CD)
     * @type {string}
     * @memberof InsertApiRequest
     */
    apiMethodCode: InsertApiRequestApiMethodCodeEnum;
    /**
     * API 서비스 코드(공통 코드 참조 : API_SVC_CD)
     * @type {string}
     * @memberof InsertApiRequest
     */
    apiServiceCode: string;
    /**
     * 권한을 체크하는지 여부(N일 경우 모두 사용 가능)
     * @type {string}
     * @memberof InsertApiRequest
     */
    authorSetupYn: string;
    /**
     * API 사용 여부
     * @type {string}
     * @memberof InsertApiRequest
     */
    useYn?: InsertApiRequestUseYnEnum;
    /**
     * API 설명
     * @type {string}
     * @memberof InsertApiRequest
     */
    apiDescription?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InsertApiRequestSiteCodeEnum {
    _01 = '01',
    _02 = '02'
}
/**
    * @export
    * @enum {string}
    */
export enum InsertApiRequestApiMethodCodeEnum {
    _01 = '01',
    _02 = '02',
    _03 = '03',
    _04 = '04'
}
/**
    * @export
    * @enum {string}
    */
export enum InsertApiRequestUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * API 등록 결과 정보
 * @export
 * @interface InsertApiResponse
 */
export interface InsertApiResponse {
    /**
     * API 아이디
     * @type {number}
     * @memberof InsertApiResponse
     */
    apiId: number;
}
/**
 * 관리자 등록 요청 정보
 * @export
 * @interface InsertManagerRequest
 */
export interface InsertManagerRequest {
    /**
     * 관리자 명
     * @type {string}
     * @memberof InsertManagerRequest
     */
    managerName: string;
    /**
     * 로그인 명
     * @type {string}
     * @memberof InsertManagerRequest
     */
    loginName: string;
    /**
     * 로그인 비밀번호
     * @type {string}
     * @memberof InsertManagerRequest
     */
    loginSecretNo: string;
    /**
     * 부서명
     * @type {string}
     * @memberof InsertManagerRequest
     */
    departmentName: string;
    /**
     * 사무실 전화 번호
     * @type {string}
     * @memberof InsertManagerRequest
     */
    officeRoomTelephoneNumber: string;
    /**
     * 핸드폰 번호
     * @type {string}
     * @memberof InsertManagerRequest
     */
    mobilePhoneNumber: string;
    /**
     * 담당 업무
     * @type {string}
     * @memberof InsertManagerRequest
     */
    chargeJob?: string;
    /**
     * 비고
     * @type {string}
     * @memberof InsertManagerRequest
     */
    remark?: string;
    /**
     * 사용자 사용 여부
     * @type {string}
     * @memberof InsertManagerRequest
     */
    useYn: string;
}
/**
 * 관리자 등록 응답 정보
 * @export
 * @interface InsertManagerResponse
 */
export interface InsertManagerResponse {
    /**
     * 관리자 아이디
     * @type {string}
     * @memberof InsertManagerResponse
     */
    managerId: string;
}
/**
 * 메뉴 등록 요청 정보
 * @export
 * @interface InsertMenuRequest
 */
export interface InsertMenuRequest {
    /**
     * 사이트 코드, 코드그룹(site_ccd)
     * @type {string}
     * @memberof InsertMenuRequest
     */
    siteCode?: InsertMenuRequestSiteCodeEnum;
    /**
     * 상위 메뉴 아이디
     * @type {number}
     * @memberof InsertMenuRequest
     */
    upperMenuId?: number;
    /**
     * 페이지 아이디
     * @type {number}
     * @memberof InsertMenuRequest
     */
    pageId?: number;
    /**
     * 메뉴 순서
     * @type {number}
     * @memberof InsertMenuRequest
     */
    menuOrder: number;
    /**
     * 메뉴 타입 코드
     * @type {string}
     * @memberof InsertMenuRequest
     */
    menuTypeCode: string;
    /**
     * 메뉴 사용 여부
     * @type {string}
     * @memberof InsertMenuRequest
     */
    useYn?: InsertMenuRequestUseYnEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InsertMenuRequestSiteCodeEnum {
    _01 = '01',
    _02 = '02'
}
/**
    * @export
    * @enum {string}
    */
export enum InsertMenuRequestUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * 메뉴 등록 결과 정보
 * @export
 * @interface InsertMenuResponse
 */
export interface InsertMenuResponse {
    /**
     * 메뉴 아이디
     * @type {number}
     * @memberof InsertMenuResponse
     */
    menuId: number;
}
/**
 * 페이지 등록 요청 정보
 * @export
 * @interface InsertPageRequest
 */
export interface InsertPageRequest {
    /**
     * 사이트 코드
     * @type {string}
     * @memberof InsertPageRequest
     */
    siteCode?: InsertPageRequestSiteCodeEnum;
    /**
     * 페이지 URL
     * @type {string}
     * @memberof InsertPageRequest
     */
    pageUri: string;
    /**
     * Component URL
     * @type {string}
     * @memberof InsertPageRequest
     */
    componentUri: string;
    /**
     * 페이지 사용 여부
     * @type {string}
     * @memberof InsertPageRequest
     */
    useYn?: InsertPageRequestUseYnEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InsertPageRequestSiteCodeEnum {
    _01 = '01',
    _02 = '02'
}
/**
    * @export
    * @enum {string}
    */
export enum InsertPageRequestUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * 페이지 등록 결과 정보
 * @export
 * @interface InsertPageResponse
 */
export interface InsertPageResponse {
    /**
     * 페이지 아이디
     * @type {number}
     * @memberof InsertPageResponse
     */
    pageId: number;
}
/**
 * 메뉴 등록 요청 정보
 * @export
 * @interface InsertRoleRequest
 */
export interface InsertRoleRequest {
    /**
     * 사이트 코드, 코드그룹(site_ccd)
     * @type {string}
     * @memberof InsertRoleRequest
     */
    siteCode: InsertRoleRequestSiteCodeEnum;
    /**
     * 롤 명
     * @type {string}
     * @memberof InsertRoleRequest
     */
    roleName: string;
    /**
     * 롤 코드
     * @type {string}
     * @memberof InsertRoleRequest
     */
    roleCode: string;
    /**
     * 롤 설명
     * @type {string}
     * @memberof InsertRoleRequest
     */
    roleDescription?: string;
    /**
     * 관리자 여부
     * @type {string}
     * @memberof InsertRoleRequest
     */
    managerYn: InsertRoleRequestManagerYnEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InsertRoleRequestSiteCodeEnum {
    _01 = '01',
    _02 = '02'
}
/**
    * @export
    * @enum {string}
    */
export enum InsertRoleRequestManagerYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * API 매핑 요청 정보
 * @export
 * @interface MappingApiRequest
 */
export interface MappingApiRequest {
    /**
     * 매핑할 API ID 목록
     * @type {Array<number>}
     * @memberof MappingApiRequest
     */
    apiIds: Array<number>;
}
/**
 * 페이지 API 매핑 결과 정보
 * @export
 * @interface MappingApiResponse
 */
export interface MappingApiResponse {
    /**
     * 매핑된 페이지 API 목록
     * @type {Array<PageApiResponse>}
     * @memberof MappingApiResponse
     */
    pageApis?: Array<PageApiResponse>;
}
/**
 * 메뉴 매핑 요청 정보
 * @export
 * @interface MappingMenuRequest
 */
export interface MappingMenuRequest {
    /**
     * 매핑할 메뉴 아이디 목록
     * @type {Array<number>}
     * @memberof MappingMenuRequest
     */
    menuIds: Array<number>;
}
/**
 * 롤 메뉴 매핑 결과 정보
 * @export
 * @interface MappingMenuResponse
 */
export interface MappingMenuResponse {
    /**
     * 매핑된 롤 메뉴 목록
     * @type {Array<RoleMenuResponse>}
     * @memberof MappingMenuResponse
     */
    roleMenus?: Array<RoleMenuResponse>;
}
/**
 * 페이지 매핑 요청 정보
 * @export
 * @interface MappingPageRequest
 */
export interface MappingPageRequest {
    /**
     * 매핑할 페이지 아이디 목록
     * @type {Array<number>}
     * @memberof MappingPageRequest
     */
    pageIds: Array<number>;
}
/**
 * 롤 페이지 매핑 결과 정보
 * @export
 * @interface MappingPageResponse
 */
export interface MappingPageResponse {
    /**
     * 매핑된 롤 페이지 목록
     * @type {Array<RolePageResponse>}
     * @memberof MappingPageResponse
     */
    rolePages?: Array<RolePageResponse>;
}
/**
 * 나의 정보
 * @export
 * @interface MyInformationResponse
 */
export interface MyInformationResponse {
    /**
     * 관리자 아이디
     * @type {number}
     * @memberof MyInformationResponse
     */
    managerId?: number;
    /**
     * 관리자 명
     * @type {string}
     * @memberof MyInformationResponse
     */
    managerName?: string;
    /**
     * 관리자 로그인 명
     * @type {string}
     * @memberof MyInformationResponse
     */
    loginName?: string;
    /**
     * 부서명
     * @type {string}
     * @memberof MyInformationResponse
     */
    departmentName?: string;
    /**
     * 사무실 전화 번호
     * @type {string}
     * @memberof MyInformationResponse
     */
    officeRoomTelephoneNumber?: string;
    /**
     * 핸드폰 번호
     * @type {string}
     * @memberof MyInformationResponse
     */
    mobilePhoneNumber?: string;
    /**
     * 담당 업무
     * @type {string}
     * @memberof MyInformationResponse
     */
    chargeJob?: string;
    /**
     * 비고
     * @type {string}
     * @memberof MyInformationResponse
     */
    remark?: string;
    /**
     * 부여된 롤(업무)
     * @type {string}
     * @memberof MyInformationResponse
     */
    roles?: string;
}
/**
 * 페이지 매핑 결과 정보
 * @export
 * @interface PageApiResponse
 */
export interface PageApiResponse {
    /**
     * Page Api 아이디
     * @type {number}
     * @memberof PageApiResponse
     */
    pageApiId?: number;
    /**
     * Page 아이디
     * @type {number}
     * @memberof PageApiResponse
     */
    pageId?: number;
    /**
     * Api 아이디
     * @type {number}
     * @memberof PageApiResponse
     */
    apiId?: number;
}
/**
 * 로그인 요청 정보
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 갱신 토큰(Refresh Token)
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    refreshToken: string;
}
/**
 * 토큰 정보
 * @export
 * @interface RefreshTokenResponse
 */
export interface RefreshTokenResponse {
    /**
     * Access token
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    accesstoken: string;
    /**
     * Refresh token
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    refreshtoken: string;
    /**
     * Token type
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    type: string;
    /**
     * 부여된 롤(업무)
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    roles?: string;
}
/**
 * 페이지 처리 정보
 * @export
 * @interface RequestPage
 */
export interface RequestPage {
    /**
     * 조회할 Page 번호
     * @type {number}
     * @memberof RequestPage
     */
    pageNumber: number;
    /**
     * 조회할 Page 사이즈
     * @type {number}
     * @memberof RequestPage
     */
    pageSize: number;
}
/**
 * 검색 페이징 결과 정보
 * @export
 * @interface ResponsePage
 */
export interface ResponsePage {
    /**
     * 조회할 Page 번호
     * @type {number}
     * @memberof ResponsePage
     */
    pageNumber?: number;
    /**
     * 조회할 Page 사이즈
     * @type {number}
     * @memberof ResponsePage
     */
    pageSize?: number;
    /**
     * 전체 수
     * @type {number}
     * @memberof ResponsePage
     */
    total?: number;
    /**
     * 페이지 수
     * @type {number}
     * @memberof ResponsePage
     */
    totalPage?: number;
}
/**
 * 롤 메뉴 매핑 결과 정보
 * @export
 * @interface RoleMenuResponse
 */
export interface RoleMenuResponse {
    /**
     * 롤 메뉴 아이디
     * @type {number}
     * @memberof RoleMenuResponse
     */
    roleMenuId?: number;
    /**
     * 롤 아이디
     * @type {number}
     * @memberof RoleMenuResponse
     */
    roleId?: number;
    /**
     * 메뉴 아이디
     * @type {number}
     * @memberof RoleMenuResponse
     */
    menuId?: number;
}
/**
 * 롤 페이지 매핑 결과 정보
 * @export
 * @interface RolePageResponse
 */
export interface RolePageResponse {
    /**
     * 롤 메뉴 아이디
     * @type {number}
     * @memberof RolePageResponse
     */
    rolePageId?: number;
    /**
     * 롤 아이디
     * @type {number}
     * @memberof RolePageResponse
     */
    roleId?: number;
    /**
     * 페이지 아이디
     * @type {number}
     * @memberof RolePageResponse
     */
    pageId?: number;
}
/**
 * API 검색 요청 정보
 * @export
 * @interface SearchApiRequest
 */
export interface SearchApiRequest {
    /**
     * API 이름
     * @type {string}
     * @memberof SearchApiRequest
     */
    apiName?: string;
    /**
     * API URL
     * @type {string}
     * @memberof SearchApiRequest
     */
    apiUri?: string;
    /**
     * API 메소드 코드(공통 코드 참조 : API_MTH_CD)
     * @type {string}
     * @memberof SearchApiRequest
     */
    apiMethodCode?: SearchApiRequestApiMethodCodeEnum;
    /**
     * API 서비스 코드(공통 코드 참조 : API_SVC_CD)
     * @type {string}
     * @memberof SearchApiRequest
     */
    apiServiceCode?: string;
    /**
     * 권한을 체크하는지 여부(N일 경우 모두 사용 가능)
     * @type {string}
     * @memberof SearchApiRequest
     */
    authorSetupYn?: string;
    /**
     * API 사용 여부
     * @type {string}
     * @memberof SearchApiRequest
     */
    useYn?: SearchApiRequestUseYnEnum;
    /**
     * 
     * @type {RequestPage}
     * @memberof SearchApiRequest
     */
    page?: RequestPage;
}

/**
    * @export
    * @enum {string}
    */
export enum SearchApiRequestApiMethodCodeEnum {
    _01Get = '01:GET',
    _02Post = '02:POST',
    _03Put = '03:PUT',
    _04Delete = '04:DELETE'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchApiRequestUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * API 검색 결과 정보
 * @export
 * @interface SearchApiResponse
 */
export interface SearchApiResponse {
    /**
     * 
     * @type {ResponsePage}
     * @memberof SearchApiResponse
     */
    page?: ResponsePage;
    /**
     * API 목록
     * @type {Array<SelectApiResponse>}
     * @memberof SearchApiResponse
     */
    contents?: Array<SelectApiResponse>;
}
/**
 * API 조회 결과 정보
 * @export
 * @interface SelectApiResponse
 */
export interface SelectApiResponse {
    /**
     * 사이트 코드
     * @type {string}
     * @memberof SelectApiResponse
     */
    siteCode: string;
    /**
     * API 아이디
     * @type {number}
     * @memberof SelectApiResponse
     */
    apiId: number;
    /**
     * API 명
     * @type {string}
     * @memberof SelectApiResponse
     */
    apiName: string;
    /**
     * API URL
     * @type {string}
     * @memberof SelectApiResponse
     */
    apiUri: string;
    /**
     * API 메소드 코드(공통 코드 참조 : API_MTH_CD)
     * @type {string}
     * @memberof SelectApiResponse
     */
    apiMethodCode: SelectApiResponseApiMethodCodeEnum;
    /**
     * API 서비스 코드(공통 코드 참조 : API_SVC_CD)
     * @type {string}
     * @memberof SelectApiResponse
     */
    apiServiceCode: string;
    /**
     * 권한을 체크하는지 여부(N일 경우 모두 사용 가능)
     * @type {string}
     * @memberof SelectApiResponse
     */
    authorSetupYn: string;
    /**
     * API 사용 여부
     * @type {string}
     * @memberof SelectApiResponse
     */
    useYn: SelectApiResponseUseYnEnum;
    /**
     * API 설명
     * @type {string}
     * @memberof SelectApiResponse
     */
    apiDescription?: string;
    /**
     * 생성자 아이디
     * @type {number}
     * @memberof SelectApiResponse
     */
    createId?: number;
    /**
     * 생성 일시
     * @type {string}
     * @memberof SelectApiResponse
     */
    createDateTime?: string;
    /**
     * 수정자 아이디
     * @type {number}
     * @memberof SelectApiResponse
     */
    updateId?: number;
    /**
     * 수정 일시
     * @type {string}
     * @memberof SelectApiResponse
     */
    updateDateTime?: string;
    /**
     * 연결된 페이지 수
     * @type {number}
     * @memberof SelectApiResponse
     */
    pageCount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SelectApiResponseApiMethodCodeEnum {
    _01Get = '01:GET',
    _02Post = '02:POST',
    _03Put = '03:PUT',
    _04Delete = '04:DELETE'
}
/**
    * @export
    * @enum {string}
    */
export enum SelectApiResponseUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * 로그인 요청 정보
 * @export
 * @interface SigninRequest
 */
export interface SigninRequest {
    /**
     * 로그인 이메일
     * @type {string}
     * @memberof SigninRequest
     */
    loginName: string;
    /**
     * 로그인 비밀번호
     * @type {string}
     * @memberof SigninRequest
     */
    loginSecretNo: string;
}
/**
 * 로그인 응답(토큰) 정보
 * @export
 * @interface SigninResponse
 */
export interface SigninResponse {
    /**
     * Access token
     * @type {string}
     * @memberof SigninResponse
     */
    accessToken: string;
    /**
     * Refresh token
     * @type {string}
     * @memberof SigninResponse
     */
    refreshToken: string;
    /**
     * Token type
     * @type {string}
     * @memberof SigninResponse
     */
    type: string;
    /**
     * 부여된 롤(업무)
     * @type {string}
     * @memberof SigninResponse
     */
    roles?: string;
}
/**
 * API 등록 요청 정보
 * @export
 * @interface UpdateApiRequest
 */
export interface UpdateApiRequest {
    /**
     * API 아이디
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiId: string;
    /**
     * API 명
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiName: string;
    /**
     * API URL
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiUri: string;
    /**
     * API 메소드 코드(공통 코드 참조 : API_MTH_CD)
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiMethodCode: UpdateApiRequestApiMethodCodeEnum;
    /**
     * API 서비스 코드(공통 코드 참조 : API_SVC_CD)
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiServiceCode: string;
    /**
     * 권한을 체크하는지 여부(N일 경우 모두 사용 가능)
     * @type {string}
     * @memberof UpdateApiRequest
     */
    authorSetupYn: string;
    /**
     * API 사용 여부
     * @type {string}
     * @memberof UpdateApiRequest
     */
    useYn?: UpdateApiRequestUseYnEnum;
    /**
     * API 설명
     * @type {string}
     * @memberof UpdateApiRequest
     */
    apiDescription?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateApiRequestApiMethodCodeEnum {
    Get = 'GET',
    Post = 'POST',
    Put = 'PUT',
    Delete = 'DELETE'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateApiRequestUseYnEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * API 등록 결과 정보
 * @export
 * @interface UpdateApiResponse
 */
export interface UpdateApiResponse {
    /**
     * API 아이디
     * @type {number}
     * @memberof UpdateApiResponse
     */
    apiId: number;
}

/**
 * ApiServiceApi - axios parameter creator
 * @export
 */
export const ApiServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary API 정보 삭제
         * @param {number} apiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApi: async (apiId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('deleteApi', 'apiId', apiId)
            const localVarPath = `/management/v1/apis/{apiId}`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API 정보 등록
         * @param {InsertApiRequest} insertApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertApi: async (insertApiRequest: InsertApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertApiRequest' is not null or undefined
            assertParamExists('insertApi', 'insertApiRequest', insertApiRequest)
            const localVarPath = `/management/v1/apis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API 검색
         * @param {SearchApiRequest} searchApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApi: async (searchApiRequest: SearchApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchApiRequest' is not null or undefined
            assertParamExists('searchApi', 'searchApiRequest', searchApiRequest)
            const localVarPath = `/management/v1/apis/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API 정보 조회
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectApi: async (apiId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('selectApi', 'apiId', apiId)
            const localVarPath = `/management/v1/apis/{apiId}`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API에 연결된 페이지 목록
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPagesByApiId: async (apiId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiId' is not null or undefined
            assertParamExists('selectPagesByApiId', 'apiId', apiId)
            const localVarPath = `/management/v1/apis/{apiId}/pages`
                .replace(`{${"apiId"}}`, encodeURIComponent(String(apiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API 정보 수정
         * @param {UpdateApiRequest} updateApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApi: async (updateApiRequest: UpdateApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateApiRequest' is not null or undefined
            assertParamExists('updateApi', 'updateApiRequest', updateApiRequest)
            const localVarPath = `/management/v1/apis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiServiceApi - functional programming interface
 * @export
 */
export const ApiServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary API 정보 삭제
         * @param {number} apiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApi(apiId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApi(apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API 정보 등록
         * @param {InsertApiRequest} insertApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertApi(insertApiRequest: InsertApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertApi(insertApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API 검색
         * @param {SearchApiRequest} searchApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchApi(searchApiRequest: SearchApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchApi(searchApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API 정보 조회
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectApi(apiId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectApi(apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API에 연결된 페이지 목록
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectPagesByApiId(apiId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectPagesByApiId(apiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API 정보 수정
         * @param {UpdateApiRequest} updateApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApi(updateApiRequest: UpdateApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateApi(updateApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiServiceApi - factory interface
 * @export
 */
export const ApiServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary API 정보 삭제
         * @param {number} apiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApi(apiId: number, options?: any): AxiosPromise<DeleteApiResponse> {
            return localVarFp.deleteApi(apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API 정보 등록
         * @param {InsertApiRequest} insertApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertApi(insertApiRequest: InsertApiRequest, options?: any): AxiosPromise<InsertApiResponse> {
            return localVarFp.insertApi(insertApiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API 검색
         * @param {SearchApiRequest} searchApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApi(searchApiRequest: SearchApiRequest, options?: any): AxiosPromise<SearchApiResponse> {
            return localVarFp.searchApi(searchApiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API 정보 조회
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectApi(apiId: number, options?: any): AxiosPromise<SelectApiResponse> {
            return localVarFp.selectApi(apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API에 연결된 페이지 목록
         * @param {number} apiId API ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectPagesByApiId(apiId: number, options?: any): AxiosPromise<SelectApiResponse> {
            return localVarFp.selectPagesByApiId(apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API 정보 수정
         * @param {UpdateApiRequest} updateApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApi(updateApiRequest: UpdateApiRequest, options?: any): AxiosPromise<UpdateApiResponse> {
            return localVarFp.updateApi(updateApiRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiServiceApi - object-oriented interface
 * @export
 * @class ApiServiceApi
 * @extends {BaseAPI}
 */
export class ApiServiceApi extends BaseAPI {
    /**
     * 
     * @summary API 정보 삭제
     * @param {number} apiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public deleteApi(apiId: number, options?: any) {
        return ApiServiceApiFp(this.configuration).deleteApi(apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API 정보 등록
     * @param {InsertApiRequest} insertApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public insertApi(insertApiRequest: InsertApiRequest, options?: any) {
        return ApiServiceApiFp(this.configuration).insertApi(insertApiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API 검색
     * @param {SearchApiRequest} searchApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public searchApi(searchApiRequest: SearchApiRequest, options?: any) {
        return ApiServiceApiFp(this.configuration).searchApi(searchApiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API 정보 조회
     * @param {number} apiId API ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public selectApi(apiId: number, options?: any) {
        return ApiServiceApiFp(this.configuration).selectApi(apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API에 연결된 페이지 목록
     * @param {number} apiId API ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public selectPagesByApiId(apiId: number, options?: any) {
        return ApiServiceApiFp(this.configuration).selectPagesByApiId(apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API 정보 수정
     * @param {UpdateApiRequest} updateApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiServiceApi
     */
    public updateApi(updateApiRequest: UpdateApiRequest, options?: any) {
        return ApiServiceApiFp(this.configuration).updateApi(updateApiRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthServiceApi - axios parameter creator
 * @export
 */
export const AuthServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 나의 정보를 조회(access token 이용)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInformation: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/v1/auth/my-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 Token 갱신
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (refreshTokenRequest: RefreshTokenRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refresh', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/management/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 관리자 로그인
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signin: async (signinRequest: SigninRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinRequest' is not null or undefined
            assertParamExists('signin', 'signinRequest', signinRequest)
            const localVarPath = `/management/v1/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthServiceApi - functional programming interface
 * @export
 */
export const AuthServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 나의 정보를 조회(access token 이용)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyInformation(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 Token 갱신
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(refreshTokenRequest: RefreshTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 관리자 로그인
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signin(signinRequest: SigninRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signin(signinRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthServiceApi - factory interface
 * @export
 */
export const AuthServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 나의 정보를 조회(access token 이용)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyInformation(options?: any): AxiosPromise<MyInformationResponse> {
            return localVarFp.getMyInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 Token 갱신
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(refreshTokenRequest: RefreshTokenRequest, options?: any): AxiosPromise<RefreshTokenResponse> {
            return localVarFp.refresh(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 관리자 로그인
         * @param {SigninRequest} signinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signin(signinRequest: SigninRequest, options?: any): AxiosPromise<SigninResponse> {
            return localVarFp.signin(signinRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthServiceApi - object-oriented interface
 * @export
 * @class AuthServiceApi
 * @extends {BaseAPI}
 */
export class AuthServiceApi extends BaseAPI {
    /**
     * 
     * @summary 나의 정보를 조회(access token 이용)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public getMyInformation(options?: any) {
        return AuthServiceApiFp(this.configuration).getMyInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 Token 갱신
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public refresh(refreshTokenRequest: RefreshTokenRequest, options?: any) {
        return AuthServiceApiFp(this.configuration).refresh(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 관리자 로그인
     * @param {SigninRequest} signinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public signin(signinRequest: SigninRequest, options?: any) {
        return AuthServiceApiFp(this.configuration).signin(signinRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ManagerServiceApi - axios parameter creator
 * @export
 */
export const ManagerServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 관리자 등록
         * @param {InsertManagerRequest} insertManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertManager: async (insertManagerRequest: InsertManagerRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertManagerRequest' is not null or undefined
            assertParamExists('insertManager', 'insertManagerRequest', insertManagerRequest)
            const localVarPath = `/management/v1/managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertManagerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerServiceApi - functional programming interface
 * @export
 */
export const ManagerServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagerServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 관리자 등록
         * @param {InsertManagerRequest} insertManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertManager(insertManagerRequest: InsertManagerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertManagerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertManager(insertManagerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManagerServiceApi - factory interface
 * @export
 */
export const ManagerServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagerServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 관리자 등록
         * @param {InsertManagerRequest} insertManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertManager(insertManagerRequest: InsertManagerRequest, options?: any): AxiosPromise<InsertManagerResponse> {
            return localVarFp.insertManager(insertManagerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagerServiceApi - object-oriented interface
 * @export
 * @class ManagerServiceApi
 * @extends {BaseAPI}
 */
export class ManagerServiceApi extends BaseAPI {
    /**
     * 
     * @summary 관리자 등록
     * @param {InsertManagerRequest} insertManagerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerServiceApi
     */
    public insertManager(insertManagerRequest: InsertManagerRequest, options?: any) {
        return ManagerServiceApiFp(this.configuration).insertManager(insertManagerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MenuServiceApi - axios parameter creator
 * @export
 */
export const MenuServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 메뉴 등록
         * @param {InsertMenuRequest} insertMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertMenu: async (insertMenuRequest: InsertMenuRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertMenuRequest' is not null or undefined
            assertParamExists('insertMenu', 'insertMenuRequest', insertMenuRequest)
            const localVarPath = `/management/v1/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertMenuRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuServiceApi - functional programming interface
 * @export
 */
export const MenuServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 메뉴 등록
         * @param {InsertMenuRequest} insertMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertMenu(insertMenuRequest: InsertMenuRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertMenu(insertMenuRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuServiceApi - factory interface
 * @export
 */
export const MenuServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 메뉴 등록
         * @param {InsertMenuRequest} insertMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertMenu(insertMenuRequest: InsertMenuRequest, options?: any): AxiosPromise<InsertMenuResponse> {
            return localVarFp.insertMenu(insertMenuRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuServiceApi - object-oriented interface
 * @export
 * @class MenuServiceApi
 * @extends {BaseAPI}
 */
export class MenuServiceApi extends BaseAPI {
    /**
     * 
     * @summary 메뉴 등록
     * @param {InsertMenuRequest} insertMenuRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public insertMenu(insertMenuRequest: InsertMenuRequest, options?: any) {
        return MenuServiceApiFp(this.configuration).insertMenu(insertMenuRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PageServiceApi - axios parameter creator
 * @export
 */
export const PageServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 페이지 등록
         * @param {InsertPageRequest} insertPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPage: async (insertPageRequest: InsertPageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertPageRequest' is not null or undefined
            assertParamExists('insertPage', 'insertPageRequest', insertPageRequest)
            const localVarPath = `/management/v1/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 페이지에 APIs 매핑
         * @param {number} pageId 페이지 아이디
         * @param {MappingApiRequest} mappingApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingApis: async (pageId: number, mappingApiRequest: MappingApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('mappingApis', 'pageId', pageId)
            // verify required parameter 'mappingApiRequest' is not null or undefined
            assertParamExists('mappingApis', 'mappingApiRequest', mappingApiRequest)
            const localVarPath = `/management/v1/pages/{pageId}/apis`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mappingApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageServiceApi - functional programming interface
 * @export
 */
export const PageServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 페이지 등록
         * @param {InsertPageRequest} insertPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertPage(insertPageRequest: InsertPageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertPage(insertPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 페이지에 APIs 매핑
         * @param {number} pageId 페이지 아이디
         * @param {MappingApiRequest} mappingApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingApis(pageId: number, mappingApiRequest: MappingApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MappingApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mappingApis(pageId, mappingApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageServiceApi - factory interface
 * @export
 */
export const PageServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 페이지 등록
         * @param {InsertPageRequest} insertPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPage(insertPageRequest: InsertPageRequest, options?: any): AxiosPromise<InsertPageResponse> {
            return localVarFp.insertPage(insertPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 페이지에 APIs 매핑
         * @param {number} pageId 페이지 아이디
         * @param {MappingApiRequest} mappingApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingApis(pageId: number, mappingApiRequest: MappingApiRequest, options?: any): AxiosPromise<MappingApiResponse> {
            return localVarFp.mappingApis(pageId, mappingApiRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageServiceApi - object-oriented interface
 * @export
 * @class PageServiceApi
 * @extends {BaseAPI}
 */
export class PageServiceApi extends BaseAPI {
    /**
     * 
     * @summary 페이지 등록
     * @param {InsertPageRequest} insertPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public insertPage(insertPageRequest: InsertPageRequest, options?: any) {
        return PageServiceApiFp(this.configuration).insertPage(insertPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 페이지에 APIs 매핑
     * @param {number} pageId 페이지 아이디
     * @param {MappingApiRequest} mappingApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public mappingApis(pageId: number, mappingApiRequest: MappingApiRequest, options?: any) {
        return PageServiceApiFp(this.configuration).mappingApis(pageId, mappingApiRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleServiceApi - axios parameter creator
 * @export
 */
export const RoleServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 롤 등록
         * @param {InsertRoleRequest} insertRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertRole: async (insertRoleRequest: InsertRoleRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertRoleRequest' is not null or undefined
            assertParamExists('insertRole', 'insertRoleRequest', insertRoleRequest)
            const localVarPath = `/management/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 롤에 메뉴 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingMenuRequest} mappingMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingMenus: async (roleId: number, mappingMenuRequest: MappingMenuRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('mappingMenus', 'roleId', roleId)
            // verify required parameter 'mappingMenuRequest' is not null or undefined
            assertParamExists('mappingMenus', 'mappingMenuRequest', mappingMenuRequest)
            const localVarPath = `/management/v1/roles/{roleId}/menus`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mappingMenuRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 롤에 페이지 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingPageRequest} mappingPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingPages: async (roleId: number, mappingPageRequest: MappingPageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('mappingPages', 'roleId', roleId)
            // verify required parameter 'mappingPageRequest' is not null or undefined
            assertParamExists('mappingPages', 'mappingPageRequest', mappingPageRequest)
            const localVarPath = `/management/v1/roles/{roleId}/pages`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer-jwt required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mappingPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleServiceApi - functional programming interface
 * @export
 */
export const RoleServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 롤 등록
         * @param {InsertRoleRequest} insertRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertRole(insertRoleRequest: InsertRoleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertRole(insertRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 롤에 메뉴 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingMenuRequest} mappingMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingMenus(roleId: number, mappingMenuRequest: MappingMenuRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MappingMenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mappingMenus(roleId, mappingMenuRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 롤에 페이지 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingPageRequest} mappingPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingPages(roleId: number, mappingPageRequest: MappingPageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MappingPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mappingPages(roleId, mappingPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleServiceApi - factory interface
 * @export
 */
export const RoleServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 롤 등록
         * @param {InsertRoleRequest} insertRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertRole(insertRoleRequest: InsertRoleRequest, options?: any): AxiosPromise<InsertMenuResponse> {
            return localVarFp.insertRole(insertRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 롤에 메뉴 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingMenuRequest} mappingMenuRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingMenus(roleId: number, mappingMenuRequest: MappingMenuRequest, options?: any): AxiosPromise<MappingMenuResponse> {
            return localVarFp.mappingMenus(roleId, mappingMenuRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 롤에 페이지 매핑
         * @param {number} roleId 롤 아이디
         * @param {MappingPageRequest} mappingPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingPages(roleId: number, mappingPageRequest: MappingPageRequest, options?: any): AxiosPromise<MappingPageResponse> {
            return localVarFp.mappingPages(roleId, mappingPageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleServiceApi - object-oriented interface
 * @export
 * @class RoleServiceApi
 * @extends {BaseAPI}
 */
export class RoleServiceApi extends BaseAPI {
    /**
     * 
     * @summary 롤 등록
     * @param {InsertRoleRequest} insertRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleServiceApi
     */
    public insertRole(insertRoleRequest: InsertRoleRequest, options?: any) {
        return RoleServiceApiFp(this.configuration).insertRole(insertRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 롤에 메뉴 매핑
     * @param {number} roleId 롤 아이디
     * @param {MappingMenuRequest} mappingMenuRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleServiceApi
     */
    public mappingMenus(roleId: number, mappingMenuRequest: MappingMenuRequest, options?: any) {
        return RoleServiceApiFp(this.configuration).mappingMenus(roleId, mappingMenuRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 롤에 페이지 매핑
     * @param {number} roleId 롤 아이디
     * @param {MappingPageRequest} mappingPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleServiceApi
     */
    public mappingPages(roleId: number, mappingPageRequest: MappingPageRequest, options?: any) {
        return RoleServiceApiFp(this.configuration).mappingPages(roleId, mappingPageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


